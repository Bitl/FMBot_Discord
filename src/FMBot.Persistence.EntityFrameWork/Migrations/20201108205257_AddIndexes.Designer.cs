// <auto-generated />
using System;
using FMBot.Persistence.EntityFrameWork;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace FMBot.Persistence.EntityFrameWork.Migrations
{
    [DbContext(typeof(FMBotDbContext))]
    [Migration("20201108205257_AddIndexes")]
    partial class AddIndexes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresExtension("citext")
                .HasPostgresExtension("pg_trgm")
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0-rc.2.20475.6");

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer")
                        .HasColumnName("artist_id");

                    b.Property<string>("ArtistName")
                        .HasColumnType("text")
                        .HasColumnName("artist_name");

                    b.Property<string>("Label")
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<string>("LastFmUrl")
                        .HasColumnType("text")
                        .HasColumnName("last_fm_url");

                    b.Property<Guid?>("Mbid")
                        .HasColumnType("uuid")
                        .HasColumnName("mbid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("Popularity")
                        .HasColumnType("integer")
                        .HasColumnName("popularity");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("release_date");

                    b.Property<string>("SpotifyId")
                        .HasColumnType("text")
                        .HasColumnName("spotify_id");

                    b.Property<DateTime?>("SpotifyImageDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("spotify_image_date");

                    b.Property<string>("SpotifyImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("spotify_image_url");

                    b.HasKey("Id")
                        .HasName("pk_albums");

                    b.HasIndex("ArtistId")
                        .HasDatabaseName("ix_albums_artist_id");

                    b.ToTable("albums");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Aliases")
                        .HasColumnType("text")
                        .HasColumnName("aliases");

                    b.Property<string>("LastFmUrl")
                        .HasColumnType("text")
                        .HasColumnName("last_fm_url");

                    b.Property<Guid?>("Mbid")
                        .HasColumnType("uuid")
                        .HasColumnName("mbid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("Popularity")
                        .HasColumnType("integer")
                        .HasColumnName("popularity");

                    b.Property<string>("SpotifyId")
                        .HasColumnType("text")
                        .HasColumnName("spotify_id");

                    b.Property<DateTime?>("SpotifyImageDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("spotify_image_date");

                    b.Property<string>("SpotifyImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("spotify_image_url");

                    b.HasKey("Id")
                        .HasName("pk_artists");

                    b.ToTable("artists");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.ArtistAlias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer")
                        .HasColumnName("artist_id");

                    b.Property<bool>("CorrectsInScrobbles")
                        .HasColumnType("boolean")
                        .HasColumnName("corrects_in_scrobbles");

                    b.HasKey("Id")
                        .HasName("pk_artist_aliases");

                    b.HasIndex("ArtistId")
                        .HasDatabaseName("ix_artist_aliases_artist_id");

                    b.ToTable("artist_aliases");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.ArtistGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer")
                        .HasColumnName("artist_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_artist_genres");

                    b.HasIndex("ArtistId")
                        .HasDatabaseName("ix_artist_genres_artist_id");

                    b.ToTable("artist_genres");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.CensoredMusic", b =>
                {
                    b.Property<int>("CensoredMusicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("censored_music_id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("AlbumName")
                        .HasColumnType("text")
                        .HasColumnName("album_name");

                    b.Property<bool>("Artist")
                        .HasColumnType("boolean")
                        .HasColumnName("artist");

                    b.Property<string>("ArtistName")
                        .HasColumnType("text")
                        .HasColumnName("artist_name");

                    b.Property<bool>("SafeForCommands")
                        .HasColumnType("boolean")
                        .HasColumnName("safe_for_commands");

                    b.Property<bool>("SafeForFeatured")
                        .HasColumnType("boolean")
                        .HasColumnName("safe_for_featured");

                    b.HasKey("CensoredMusicId")
                        .HasName("pk_censored_music");

                    b.ToTable("censored_music");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.Friend", b =>
                {
                    b.Property<int>("FriendId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("friend_id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("FriendUserId")
                        .HasColumnType("integer")
                        .HasColumnName("friend_user_id");

                    b.Property<string>("LastFMUserName")
                        .HasColumnType("text")
                        .HasColumnName("last_fm_user_name");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("FriendId")
                        .HasName("pk_friends");

                    b.HasIndex("FriendUserId")
                        .HasDatabaseName("ix_friends_friend_user_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_friends_user_id");

                    b.ToTable("friends");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.Guild", b =>
                {
                    b.Property<int>("GuildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("guild_id")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool?>("Blacklisted")
                        .HasColumnType("boolean")
                        .HasColumnName("blacklisted");

                    b.Property<int>("ChartTimePeriod")
                        .HasColumnType("integer")
                        .HasColumnName("chart_time_period");

                    b.Property<bool?>("DisableSupporterMessages")
                        .HasColumnType("boolean")
                        .HasColumnName("disable_supporter_messages");

                    b.Property<string>("DisabledCommands")
                        .HasColumnType("text")
                        .HasColumnName("disabled_commands");

                    b.Property<decimal>("DiscordGuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_guild_id");

                    b.Property<string>("EmoteReactions")
                        .HasColumnType("text")
                        .HasColumnName("emote_reactions");

                    b.Property<int>("FmEmbedType")
                        .HasColumnType("integer")
                        .HasColumnName("fm_embed_type");

                    b.Property<DateTime?>("LastIndexed")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_indexed");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Prefix")
                        .HasColumnType("text")
                        .HasColumnName("prefix");

                    b.Property<bool?>("SpecialGuild")
                        .HasColumnType("boolean")
                        .HasColumnName("special_guild");

                    b.Property<bool?>("TitlesEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("titles_enabled");

                    b.HasKey("GuildId")
                        .HasName("pk_guilds");

                    b.HasIndex("DiscordGuildId")
                        .HasDatabaseName("ix_guilds_discord_guild_id");

                    b.ToTable("guilds");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.GuildUser", b =>
                {
                    b.Property<int>("GuildId")
                        .HasColumnType("integer")
                        .HasColumnName("guild_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("GuildId", "UserId")
                        .HasName("pk_guild_users");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_guild_users_user_id");

                    b.ToTable("guild_users");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.InactiveUsers", b =>
                {
                    b.Property<int>("InactiveUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("inactive_user_id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<int?>("FailureErrorCount")
                        .HasColumnType("integer")
                        .HasColumnName("failure_error_count");

                    b.Property<int?>("NoScrobblesErrorCount")
                        .HasColumnType("integer")
                        .HasColumnName("no_scrobbles_error_count");

                    b.Property<int?>("RecentTracksPrivateCount")
                        .HasColumnType("integer")
                        .HasColumnName("recent_tracks_private_count");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int?>("UserId1")
                        .HasColumnType("integer")
                        .HasColumnName("user_id1");

                    b.Property<string>("UserNameLastFM")
                        .HasColumnType("text")
                        .HasColumnName("user_name_last_fm");

                    b.HasKey("InactiveUserId")
                        .HasName("pk_inactive_users");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_inactive_users_user_id");

                    b.HasIndex("UserId1")
                        .HasDatabaseName("ix_inactive_users_user_id1");

                    b.ToTable("inactive_users");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.Supporter", b =>
                {
                    b.Property<int>("SupporterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("supporter_id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<bool>("SupporterMessagesEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("supporter_messages_enabled");

                    b.Property<int>("SupporterType")
                        .HasColumnType("integer")
                        .HasColumnName("supporter_type");

                    b.Property<bool>("VisibleInOverview")
                        .HasColumnType("boolean")
                        .HasColumnName("visible_in_overview");

                    b.HasKey("SupporterId")
                        .HasName("pk_supporters");

                    b.ToTable("supporters");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.Track", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("AlbumId")
                        .HasColumnType("integer")
                        .HasColumnName("album_id");

                    b.Property<string>("AlbumName")
                        .HasColumnType("text")
                        .HasColumnName("album_name");

                    b.Property<int?>("ArtistId")
                        .HasColumnType("integer")
                        .HasColumnName("artist_id");

                    b.Property<string>("ArtistName")
                        .HasColumnType("text")
                        .HasColumnName("artist_name");

                    b.Property<int?>("DurationMs")
                        .HasColumnType("integer")
                        .HasColumnName("duration_ms");

                    b.Property<int?>("Key")
                        .HasColumnType("integer")
                        .HasColumnName("key");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("Popularity")
                        .HasColumnType("integer")
                        .HasColumnName("popularity");

                    b.Property<string>("SpotifyId")
                        .HasColumnType("text")
                        .HasColumnName("spotify_id");

                    b.Property<DateTime?>("SpotifyLastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("spotify_last_updated");

                    b.Property<float?>("Tempo")
                        .HasColumnType("real")
                        .HasColumnName("tempo");

                    b.HasKey("Id")
                        .HasName("pk_tracks");

                    b.HasIndex("AlbumId")
                        .HasDatabaseName("ix_tracks_album_id");

                    b.HasIndex("ArtistId")
                        .HasDatabaseName("ix_tracks_artist_id");

                    b.ToTable("tracks");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool?>("Blocked")
                        .HasColumnType("boolean")
                        .HasColumnName("blocked");

                    b.Property<int>("ChartTimePeriod")
                        .HasColumnType("integer")
                        .HasColumnName("chart_time_period");

                    b.Property<decimal>("DiscordUserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_user_id");

                    b.Property<bool?>("Featured")
                        .HasColumnType("boolean")
                        .HasColumnName("featured");

                    b.Property<bool?>("FeaturedNotificationsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("featured_notifications_enabled");

                    b.Property<int?>("FmCountType")
                        .HasColumnType("integer")
                        .HasColumnName("fm_count_type");

                    b.Property<int>("FmEmbedType")
                        .HasColumnType("integer")
                        .HasColumnName("fm_embed_type");

                    b.Property<DateTime?>("LastGeneratedChartDateTimeUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_generated_chart_date_time_utc");

                    b.Property<DateTime?>("LastIndexed")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_indexed");

                    b.Property<DateTime?>("LastScrobbleUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_scrobble_update");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_used");

                    b.Property<string>("SessionKeyLastFm")
                        .HasColumnType("text")
                        .HasColumnName("session_key_last_fm");

                    b.Property<bool?>("TitlesEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("titles_enabled");

                    b.Property<string>("UserNameLastFM")
                        .HasColumnType("text")
                        .HasColumnName("user_name_last_fm");

                    b.Property<int>("UserType")
                        .HasColumnType("integer")
                        .HasColumnName("user_type");

                    b.HasKey("UserId")
                        .HasName("pk_users");

                    b.HasIndex("DiscordUserId")
                        .HasDatabaseName("ix_users_discord_user_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_users_user_id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.UserAlbum", b =>
                {
                    b.Property<int>("UserAlbumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_album_id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ArtistName")
                        .HasColumnType("citext")
                        .HasColumnName("artist_name");

                    b.Property<string>("Name")
                        .HasColumnType("citext")
                        .HasColumnName("name");

                    b.Property<int>("Playcount")
                        .HasColumnType("integer")
                        .HasColumnName("playcount");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("UserAlbumId")
                        .HasName("pk_user_albums");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_albums_user_id");

                    b.ToTable("user_albums");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.UserArtist", b =>
                {
                    b.Property<int>("UserArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_artist_id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("citext")
                        .HasColumnName("name");

                    b.Property<int>("Playcount")
                        .HasColumnType("integer")
                        .HasColumnName("playcount");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("UserArtistId")
                        .HasName("pk_user_artists");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_artists_user_id");

                    b.ToTable("user_artists");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.UserPlay", b =>
                {
                    b.Property<int>("UserPlayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_play_id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("AlbumName")
                        .HasColumnType("citext")
                        .HasColumnName("album_name");

                    b.Property<string>("ArtistName")
                        .HasColumnType("citext")
                        .HasColumnName("artist_name");

                    b.Property<DateTime>("TimePlayed")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time_played");

                    b.Property<string>("TrackName")
                        .HasColumnType("citext")
                        .HasColumnName("track_name");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("UserPlayId")
                        .HasName("pk_user_plays");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_plays_user_id");

                    b.ToTable("user_plays");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.UserTrack", b =>
                {
                    b.Property<int>("UserTrackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_track_id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ArtistName")
                        .HasColumnType("citext")
                        .HasColumnName("artist_name");

                    b.Property<string>("Name")
                        .HasColumnType("citext")
                        .HasColumnName("name");

                    b.Property<int>("Playcount")
                        .HasColumnType("integer")
                        .HasColumnName("playcount");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("UserTrackId")
                        .HasName("pk_user_tracks");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_tracks_user_id");

                    b.ToTable("user_tracks");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.Album", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.Artist", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistId")
                        .HasConstraintName("fk_albums_artists_artist_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.ArtistAlias", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.Artist", "Artist")
                        .WithMany("ArtistAliases")
                        .HasForeignKey("ArtistId")
                        .HasConstraintName("fk_artist_aliases_artists_artist_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.ArtistGenre", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.Artist", "Artist")
                        .WithMany("ArtistGenres")
                        .HasForeignKey("ArtistId")
                        .HasConstraintName("fk_artist_genres_artists_artist_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.Friend", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.User", "FriendUser")
                        .WithMany("FriendedByUsers")
                        .HasForeignKey("FriendUserId")
                        .HasConstraintName("FK.Friends.Users_FriendUserID");

                    b.HasOne("FMBot.Persistence.Domain.Models.User", "User")
                        .WithMany("Friends")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK.Friends.Users_UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FriendUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.GuildUser", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.Guild", "Guild")
                        .WithMany("GuildUsers")
                        .HasForeignKey("GuildId")
                        .HasConstraintName("fk_guild_users_guilds_guild_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FMBot.Persistence.Domain.Models.User", "User")
                        .WithMany("GuildUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_guild_users_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.InactiveUsers", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_inactive_users_users_user_id");

                    b.HasOne("FMBot.Persistence.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .HasConstraintName("fk_inactive_users_users_user_id1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.Track", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.Album", null)
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId")
                        .HasConstraintName("fk_tracks_albums_album_id");

                    b.HasOne("FMBot.Persistence.Domain.Models.Artist", "Artist")
                        .WithMany("Tracks")
                        .HasForeignKey("ArtistId")
                        .HasConstraintName("fk_tracks_artists_artist_id");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.UserAlbum", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.User", "User")
                        .WithMany("Albums")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_albums_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.UserArtist", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.User", "User")
                        .WithMany("Artists")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_artists_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.UserPlay", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.User", "User")
                        .WithMany("Plays")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_plays_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.UserTrack", b =>
                {
                    b.HasOne("FMBot.Persistence.Domain.Models.User", "User")
                        .WithMany("Tracks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_tracks_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.Album", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.Artist", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("ArtistAliases");

                    b.Navigation("ArtistGenres");

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.Guild", b =>
                {
                    b.Navigation("GuildUsers");
                });

            modelBuilder.Entity("FMBot.Persistence.Domain.Models.User", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Artists");

                    b.Navigation("FriendedByUsers");

                    b.Navigation("Friends");

                    b.Navigation("GuildUsers");

                    b.Navigation("Plays");

                    b.Navigation("Tracks");
                });
#pragma warning restore 612, 618
        }
    }
}
