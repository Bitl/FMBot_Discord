// <auto-generated />
using System;
using Bot.Persistence.EntityFrameWork;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Bot.Persistence.EntityFrameWork.Migrations
{
    [DbContext(typeof(BotContext))]
    [Migration("20190606140239_usernameNoLongerRequired")]
    partial class usernameNoLongerRequired
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Bot.Persistence.Domain.Entities.Request", b =>
                {
                    b.Property<DateTime>("TimeStamp")
                        .HasColumnName("timestamp");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasColumnName("command");

                    b.Property<string>("ErrorMessage")
                        .HasColumnName("errormessage");

                    b.Property<bool>("IsSuccessFull")
                        .HasColumnName("issuccessfull");

                    b.Property<long>("RunTime")
                        .HasColumnName("runtime");

                    b.Property<decimal?>("ServerId")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)))
                        .HasColumnName("serverid");

                    b.Property<decimal>("UserId")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)))
                        .HasColumnName("userid");

                    b.HasKey("TimeStamp", "Id");

                    b.HasIndex("ServerId");

                    b.HasIndex("UserId");

                    b.ToTable("requests");
                });

            modelBuilder.Entity("Bot.Persistence.Domain.Entities.Server", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)))
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnName("active");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnName("joindate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.Property<string>("Prefix")
                        .HasColumnName("prefix");

                    b.Property<int>("TotalMembers")
                        .HasColumnName("totalmembers");

                    b.HasKey("Id");

                    b.ToTable("servers");
                });

            modelBuilder.Entity("Bot.Persistence.Domain.Entities.User", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)))
                        .HasColumnName("id");

                    b.Property<int>("CommandSpam")
                        .HasColumnName("commandspam");

                    b.Property<DateTime>("CommandUsed")
                        .HasColumnName("commandused");

                    b.Property<int>("DefaultFMType")
                        .HasColumnName("defaultfmtype");

                    b.Property<int>("DefaultTimeSpan")
                        .HasColumnName("defaulttimespan");

                    b.Property<bool?>("Featured")
                        .HasColumnName("featured");

                    b.Property<string>("LastFMUserName")
                        .HasColumnName("lastfmusername");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.Property<int>("SpamWarning")
                        .HasColumnName("spamwarning");

                    b.Property<int>("TotalTimesTimedOut")
                        .HasColumnName("timestimedout");

                    b.Property<int>("UserType")
                        .HasColumnName("usertype");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Bot.Persistence.Domain.Entities.Request", b =>
                {
                    b.HasOne("Bot.Persistence.Domain.Entities.Server", "Server")
                        .WithMany("Requests")
                        .HasForeignKey("ServerId");

                    b.HasOne("Bot.Persistence.Domain.Entities.User", "User")
                        .WithMany("Requests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
